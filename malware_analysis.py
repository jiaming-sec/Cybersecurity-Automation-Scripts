import hashlib
import os
import json
import logging
import magic

# Configure logging
logging.basicConfig(
    filename="malware_analysis.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# Define paths
ANALYSIS_FOLDER = "files_to_scan"
REPORT_FILE = "malware_analysis_report.json"

# Define known malicious hashes (Example list, should be expanded dynamically)
KNOWN_MALICIOUS_HASHES = {
    "5d41402abc4b2a76b9719d911017c592": "ExampleMalware.exe"
}

def calculate_hash(file_path, hash_function="md5"):
    """Calculate the hash of a file using the specified hash function."""
    hash_func = hashlib.new(hash_function)
    try:
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_func.update(chunk)
        return hash_func.hexdigest()
    except Exception as e:
        logging.error(f"Error hashing {file_path}: {e}")
        return None
def analyze_files():
    """Analyze files in the specified folder for potential malware."""
    if not os.path.exists(ANALYSIS_FOLDER):
        logging.error("Analysis folder does not exist!")
        return
results = []
    
for file_name in os.listdir(ANALYSIS_FOLDER):
    file_path = os.path.join(ANALYSIS_FOLDER, file_name)
    if os.path.isfile(file_path):
            file_info = {
                "file_name": file_name,
                "file_type": magic.from_file(file_path, mime=True),
                "md5_hash": calculate_hash(file_path, "md5"),
                "sha256_hash": calculate_hash(file_path, "sha256"),
                "status": "Safe"
            }
    if file_info["md5_hash"] in KNOWN_MALICIOUS_HASHES:
                file_info["status"] = "Malicious"
                file_info["reason"] = "Known hash match"
            
            results.append(file_info)
        
    
with open(REPORT_FILE, "w") as json_file:
        json.dump(results, json_file, indent=4)
    
logging.info(f"Analyzed {len(results)} files. Report saved to {REPORT_FILE}")
    print(f"Malware analysis completed. Report saved to {REPORT_FILE}")

if __name__ == "__main__":
    analyze_files()
